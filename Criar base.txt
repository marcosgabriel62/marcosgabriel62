Criar base:
create database BANCO_DE_DADOS;

Selecionar base:
use BANCO_DE_DADOS;

Criar tabela no banco:
create table Vendas(
	ID_Venda INT,
	Curso VARCHAR(100),
	Aluno VARCHAR(100),
	Estado VARCHAR (100),
	Valor DECIMAL (10,2)
);

Selecionar todos os dados de uma tabela:
select * from Vendas;
select Aluno, Curso, Valor from Vendas;

Ordenar dados de uma tabela:
select * from Vendas
order by Aluno;

Filtrar dados em uma tabela:
select * from Vendas 
where Estado = 'RJ';

Alteração de valores dentro de uma tabela:
update Vendas
set valor = 150 
where Curso = 'VBA';

Exclusão de linhas da tabela:
delete from Vendas
where ID_Venda = 10;

Exclusão de todos os dados de uma tabela:
truncate table Vendas;

CREATE DATABASE video_aula;
USE video_aula;



Nesta primeira vídeo aula sobre MySQL os tópicos são:
- Conceito de Banco de Dados, MySQL, Linguagem SQL.
- Como baixar o MySQL
- Como instalar o MySQL
- Como se conectar ao MySQL usando o MySQL Workbench
- Comandos básicos do MySQL.

Os comandos básicos que ensino neste vídeo são:
CREATE DATABASE - Para criar o banco de dados
CREATE TABLE - Para criar tabelas
SELECT - Para selecionar dados de uma tabela
INSERT - Para inserir dados em uma tabela

Após os comandos básicos eu explico sobre JOINS:
- NATURAL JOIN: Não gosto desse e tenho a impressão que é recíproco. hahaha
- INNER JOIN: Retorna somente os registros que realmente possuam relação entre as tabelas.
- LEFT JOIN: Retorna todos os registros da tabela da esquerda, e se possuir relação com a tabela da direita, retorna também os registros da tabela da direita, se não, os registros da tabela da direita retornam NULOS.
- RIGHT JOIN: O inverso do LEFT JOIN, ou seja, retorna todos os registros da tabela da direita, e se possuir relação com a tabela da esquerda, retorna também os registros da tabela da esquerda, se não, os registros da tabela da esquerda retornam NULOS.



CREATE TABLE empresa
(
  id INT PRIMARY KEY AUTO_INCREMENT,
  razao_social VARCHAR(30) NOT NULL,
  cidade VARCHAR(20) NOT NULL,
  uf VARCHAR(2) NOT NULL
);

CREATE TABLE funcionario
(
  id INT PRIMARY KEY AUTO_INCREMENT,
  nome VARCHAR(30) NOT NULL,
  cargo VARCHAR(30),
  empresa_id INT,
  FOREIGN KEY (empresa_id) REFERENCES empresa(id)
);

INSERT INTO empresa (razao_social, cidade, uf) VALUES ('Empresa Master', 'São Paulo', 'SP');
INSERT INTO empresa (razao_social, cidade, uf) VALUES ('Facebook', 'Minas Gerais', 'MG');
INSERT INTO empresa (razao_social, cidade, uf) VALUES ('Empresa Carioca', 'Rio de Janeiro', 'RJ');

INSERT INTO funcionario (nome, cargo, empresa_id) VALUES ('João da Silva', 'CEO', 1);
INSERT INTO funcionario (nome, cargo, empresa_id) VALUES ('Pedro Lopes', 'Analista', 2);
INSERT INTO funcionario (nome, cargo, empresa_id) VALUES ('Guilherme Toti', 'Desenvolvedor', 3);
INSERT INTO funcionario (nome, cargo, empresa_id) VALUES ('Racco Donald', NULL, NULL);
INSERT INTO funcionario (nome, cargo, empresa_id) VALUES ('Bevolindo Souza', 'DBA', 2);

SELECT * FROM funcionario NATURAL JOIN empresa;
SELECT * FROM empresa NATURAL JOIN funcionario;

SELECT * FROM empresa e INNER JOIN funcionario f ON e.id = f.empresa_id;
SELECT * FROM funcionario f INNER JOIN empresa e ON f.empresa_id = e.id;

SELECT * FROM empresa e LEFT JOIN funcionario f ON e.id = f.empresa_id;
SELECT * FROM funcionario f LEFT JOIN empresa e ON f.empresa_id = e.id;

SELECT * FROM empresa e RIGHT JOIN funcionario f ON e.id = f.empresa_id;
SELECT * FROM funcionario f RIGHT JOIN empresa e ON f.empresa_id = e.id;




